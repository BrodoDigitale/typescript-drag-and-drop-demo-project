(()=>{"use strict";function e(e,t,r){const n=r.value;return{configurable:!0,get(){return n.bind(this)}}}var t;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(t||(t={}));class r{constructor(e,t,r,n,s){this.id=e,this.title=t,this.description=r,this.people=n,this.projectStatus=s}}class n{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class s extends n{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,n,s){const i=new r(Math.random().toString(),e,n,s,t.Active);this.projects.push(i),this.updateListeners()}moveProject(e,t){const r=this.projects.find((t=>t.id===e));r&&r.projectStatus!==t&&(r.projectStatus=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const i=s.getInstance();function o(e){let t=!0;return e.required&&(t=t&&e.property.toString().trim().length>0),e.minLength&&"string"==typeof e.property&&(t=t&&e.property.trim().length>=e.minLength),e.maxLength&&"string"==typeof e.property&&(t=t&&e.property.trim().length<=e.maxLength),e.min&&"number"==typeof e.property&&(t=t&&e.property>=e.min),e.max&&"number"==typeof e.property&&(t=t&&e.property<=e.max),t}class l{constructor(e,t,r,n){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,n&&(this.element.id=n),this.render(r)}render(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class p extends l{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}inputValuesCollector(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,r=this.peopleInputElement.value,n={property:t,required:!0,minLength:5},s={property:+r,required:!0,min:1,max:9};if(o({property:e,required:!0})&&o(n)&&o(s))return[e,t,+r];alert("invalid input!")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.inputValuesCollector();if(t){const[e,r,n]=t;i.addProject(e,r,n),this.clearInputs()}}}!function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);i>3&&o&&Object.defineProperty(t,r,o)}([e],p.prototype,"submitHandler",null);var c=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class a extends l{get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons,this.element.querySelector("p").textContent=this.project.description}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("drag ended")}}c([e],a.prototype,"dragStartHandler",null),c([e],a.prototype,"dragEndHandler",null);var d=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class u extends l{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),i.addListener((e=>{this.assignedProjects=e.filter((e=>"active"===this.type?e.projectStatus===t.Active:e.projectStatus===t.Finished)),this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new a(this.element.querySelector("ul").id,e)}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const r=e.dataTransfer.getData("text/plain");i.moveProject(r,"active"===this.type?t.Active:t.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}}d([e],u.prototype,"dragOverHandler",null),d([e],u.prototype,"dropHandler",null),d([e],u.prototype,"dragLeaveHandler",null),new p,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,